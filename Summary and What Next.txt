
A. Summary:

	To code this short program I began by reading up on the RFC email specs, as suggested by your website, found in
	the: Proposed standard for Internet Message Format (RFC2822). In addition, I looked up a several websites that 
	discussed full email headers and how to analyze them. From this I made the following decisions:
	
		Parse out the following fields as they seem to be the most relevant and the most common(I categorized as most  
		common the fields that most appeared on the websites I researched):
			
			a. Date*
			b. From*
			c. To
			d. Subject
			e. Delivery-Date
			g. Received 
			h. Message-ID
			i. Return-Path		
			
			* "Date" and "From" are the only two fields that are mandatory in an email header. For this reason I extracted it,
				even though "From" can be easily forged and therefore is not a reliable header field		
				
			note: there are plenty of headers available (a good list can be found in RFC4021), however I will limit myself 
					to choosing a subset of those mentioned in RFC2822

B. What next:

		a - Add a method to verify that the only two required header fields ("Date:" and "From:") are present
		b - Address different MIME types in body
		c - Add support for obsolete syntax (see section D, item 2)
		d - Address the rest of the assumptions
	
C. Assumptions:
	
	1 - Email is valid syntax
			
			a. valid headers
			b. all fields have valid characters according to their grammar
			
	2 - No obsolete fields present 
	
D. Notes:

	1. IANA header message header field names
	
	2. The Content-Type field for multipart entities requires one parameter, "boundary". The boundary delimiter line is then 
		defined as a line consisting entirely of two hyphen characters ("-", decimal value 45) followed by the boundary parameter 
		value from the Content-Type header field, optional linear whitespace, and a terminating CRLF.
			(i.e. regex: "^--<insert boundary value here>[ \t]*\r\n"; the "<" and ">" characters are not part of the regex)
			
	3. For more about MIME multipart syntax read RFC2046
	
	4. Should remove potential UI blocking code when logging to output_TA
		
		
